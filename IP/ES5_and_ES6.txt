
Certainly, here's a table format that distinguishes ES5 (ECMAScript 5) from ES6 (ECMAScript 2015) in various aspects:

| Aspect                         | ES5                                       | ES6                                      |
| ------------------------------- | ----------------------------------------- | ---------------------------------------- |
| Variable Declarations           | Used `var` for function-scoped variables   | Introduced `let` and `const` for block-scoped variables |
| Arrow Functions                | Used `function` for defining functions      | Introduced arrow functions (`=>`)        |
| Block Scoping                  | Function-level scoping                     | Block-level scoping with `let` and `const` |
| Classes and Inheritance        | Constructor functions and prototypes       | `class` syntax for structured OOP, `extends` keyword for inheritance |
| Template Literals              | String concatenation (`+` operator)        | Introduced template literals (``)         |
| Default Parameters             | Conditional statements for defaults        | Direct support for default parameters     |
| Destructuring                  | Manual extraction from objects/arrays       | Destructuring syntax for easier extraction |
| Spread and Rest Operators      | Not natively available                     | Introduced spread (`...`) and rest (`...`) operators |
| Promises                       | Callbacks for async operations             | Introduced Promise object for structured async programming |
| Modules                        | No native module system                    | Introduced `import` and `export` statements for modular code |
| Map and Set Data Structures    | Lacked Map and Set                         | Introduced native Map and Set data structures |
| Generator Functions            | Not available                              | Introduced generator functions (`function*`) for iterators |
| Function Binding               | `bind()` method for function binding       | Arrow functions inherit `this` from surrounding context |
| Object Shorthand              | Constructor functions for objects           | Object shorthand notation for concise object creation |
| Enhanced Object Literals       | Limited object property notation            | Enhanced object literals for computed property names |
| String Methods                | Limited string manipulation methods         | Introduced additional string methods       |

Please note that this table provides a high-level comparison of ES5 and ES6 features. JavaScript continues to evolve, with new features and enhancements introduced in subsequent ECMAScript versions.







Certainly! Here are example code snippets for each of the topics you mentioned in ES6:

**1. Variables (let, const):**
```javascript
// ES6
let a = 5;
a = 10;

const b = 5;
// b = 10; // Error: Assignment to constant variable
```

**2. Conditionals (if-else):**
```javascript
// ES6
const condition = true;
if (condition) {
  console.log("It's true");
} else {
  console.log("It's false");
}
```

**3. Loops (for-of):**
```javascript
// ES6
const array = [1, 2, 3];
for (let item of array) {
  console.log(item);
}
```

**4. Functions (Arrow Functions):**
```javascript
// ES6
const add = (a, b) => a + b;
console.log(add(5, 3)); // Output: 8
```

**5. Setting CSS Styles using JavaScript:**
```javascript
// ES6
const element = document.getElementById('myElement');
element.style.backgroundColor = 'blue';
```

**6. DOM Manipulation:**
```javascript
// ES6
const element = document.getElementById('myElement');
element.textContent = 'Hello, ES6!';
```

**7. Classes and Inheritance:**
```javascript
// ES6
class Animal {
  constructor(name) {
    this.name = name;
  }

  sound() {
    console.log('Animal sound');
  }
}

class Dog extends Animal {
  sound() {
    console.log('Bark!');
  }
}

const myDog = new Dog('Rex');
myDog.sound(); // Output: Bark!
```

**8. Iterators and Generators:**
```javascript
// ES6
const iterable = [1, 2, 3];
const iterator = iterable[Symbol.iterator]();

function* generatorFunction() {
  yield 1;
  yield 2;
  yield 3;
}

const generator = generatorFunction();
```

**9. Promise:**
```javascript
// ES6
const fetchData = () => {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve("Data fetched successfully");
      // reject("Error fetching data"); // Uncomment to simulate an error
    }, 1000);
  });
};

fetchData()
  .then(data => console.log(data))
  .catch(error => console.error(error));
```

**10. Client-Server Communication (Fetch API):**
```javascript
// ES6
fetch('https://jsonplaceholder.typicode.com/posts/1')
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error(error));
```

These code snippets provide practical examples of each topic in ES6, demonstrating how to use the features and concepts introduced in ECMAScript 2015.